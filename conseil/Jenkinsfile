pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        SONARQUBE_SERVER = 'SonarQubeServer'
        DOCKER_HUB_REPO = 'hajarhamim/fil-rouge-conseil'
        SONAR_TOKEN = credentials('SonarQubeToken')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Hamim-Hajar/Fil-Rouge-Conseil-Beauty.git'
            }
        }

        stage('Build and Unit Tests') {
            steps {
                dir('artisanat-backend') {
                    sh "mvn clean install"
                    sh "mvn test"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=fil-rouge-conseil -Dsonar.host.url=http://localhost:9000 -Dsonar.token=${SONAR_TOKEN}"
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        pipeline {
            agent any

            stages {
                stage('Build Docker Image for Backend') {
                    steps {
                        script {
                            // Change to the directory containing the Dockerfile for the backend service
                            dir('conseil') {
                                // Build the Docker image for the backend
                                bat 'docker build -t fil-rouge-artisanat-backend .'
                            }
                        }
                    }
                }

                stage('Tag and Push Docker Image to Docker Hub') {
                    steps {
                        script {
                            // Docker Hub repository and credentials
                            docker.withRegistry("https://index.docker.io/v1/", 'docker-credentials-id') {
                                // Tag the image and push it to Docker Hub
                                def imageName = "${DOCKER_HUB_REPO}/artisanat-backend"
                                sh """
                                    docker tag fil-rouge-artisanat-backend:latest ${imageName}:latest
                                    docker push ${imageName}:latest
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                dir('artisanat-backend') {
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}